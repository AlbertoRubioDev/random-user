{"version":3,"sources":["Components/UserList.js","Components/UserDetail.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadUsers","_this$state","state","userList","page","perPage","url","randomSeed","concat","axios","get","then","response","setState","toConsumableArray","data","results","isLoading","loadMore","prevState","handleClick","user","onSelectUser","totalPages","_this2","react_default","a","createElement","List","className","map","ListItem","button","onClick","key","login","uuid","ListItemAvatar","Avatar","alt","name","first","src","picture","thumbnail","ListItemText","primary","last","secondary","location","city","index_es","code","nat","svg","Button","variant","color","React","Component","UserDetails","prop","_React$useState","useState","amount","password","weight","weightRange","showPassword","_React$useState2","slicedToArray","values","setValues","Card","CardContent","firstname","pic","Typography","TextField","id","label","value","username","margin","InputProps","readOnly","email","type","onChange","event","objectSpread","defineProperty","target","endAdornment","InputAdornment","position","IconButton","edge","aria-label","onMouseDown","preventDefault","VisibilityOff_default","Visibility_default","lastname","gender","age","startAdornment","styleProps","width","height","street","phone","cell","theme","createMuiTheme","palette","main","App","openDrawer","drawerOpen","closeDrawer","selectedUser","isSelected","console","log","onHomeClick","ThemeProvider","AppBar","Toolbar","Home_default","People_default","Drawer","anchor","open","ChevronLeft_default","Divider","UserList","Paper","large","title","dob","gutterBottom","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oRA2EeA,cA1DX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAWVQ,UAAY,WAAM,IAAAC,EACgCR,EAAKS,MAA5CC,EADOF,EACPE,SAAUC,EADHH,EACGG,KAAMC,EADTJ,EACSI,QACjBC,GAFQL,EACkBM,WACvB,mCAAAC,OAAsCJ,EAAtC,aAAAI,OAAsDH,EAAtD,cACTI,IAAMC,IAAIJ,GACTK,KAAK,SAAAC,GACFnB,EAAKoB,SAAS,CACVV,SAAQ,GAAAK,OAAAd,OAAAoB,EAAA,EAAApB,CAAMS,GAANT,OAAAoB,EAAA,EAAApB,CAAmBkB,EAASG,KAAKC,UAAUC,WAAU,OAlBtDxB,EAuBnByB,SAAW,WACPzB,EAAKoB,SAAS,SAAAM,GAAS,MAAK,CACxBf,KAAMe,EAAUf,KAAO,EACvBa,WAAW,IACXxB,EAAKO,YA3BMP,EA8BnB2B,YAAc,SAACC,GACX5B,EAAKD,MAAM8B,aAAaD,IA7BxB5B,EAAKS,MAAQ,CAACC,SAAU,GAAIE,QAAS,GAAID,KAAM,EAAGmB,WAAY,KAAMN,WAAW,GAFhExB,mFAMfG,KAAKI,YACLJ,KAAKiB,SAAS,CACVN,WAAYX,KAAKJ,MAAMe,8CA0BvB,IAAAiB,EAAA5B,KACJ,OACI6B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAW,QAChBjC,KAAKM,MAAMC,SAAS2B,IAAI,SAAAT,GAAI,OAC7BI,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAUC,QAAM,EAACC,QAAS,kBAAMT,EAAKJ,YAAYC,IAAOa,IAAKb,EAAKc,MAAMC,MACpEX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACIZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAQC,IAAKlB,EAAKmB,KAAKC,MAAOC,IAAKrB,EAAKsB,QAAQC,aAEpDnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAcC,QAASzB,EAAKmB,KAAKC,MAAO,IAAKpB,EAAKmB,KAAKO,KAAOC,UAAW3B,EAAK4B,SAASC,OACvFzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAkBC,KAAM/B,EAAKgC,IAAKC,KAAG,OAGxC1D,KAAKM,MAAMe,UACZQ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACfJ,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAQC,QAAQ,WAAWC,MAAM,UAAUxB,QAASrC,KAAKsB,SAAUW,UAAU,aAA7E,qBAlDW6B,IAAMC,0HCDd,SAASC,EAAYpE,GAAM,IAUrBqE,EAVqBC,EAEdJ,IAAMK,SAAS,CACvCC,OAAQ,GACRC,SAAU,GACVC,OAAQ,GACRC,YAAa,GACbC,cAAc,IAPwBC,EAAA3E,OAAA4E,EAAA,EAAA5E,CAAAoE,EAAA,GAEnCS,EAFmCF,EAAA,GAE3BG,EAF2BH,EAAA,GAsBzC,OAAO5C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,IACnBJ,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,KACAhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,KACAjD,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAQC,IAAK/C,EAAMmF,UAAWjC,IAAKlD,EAAMoF,IAAK/C,UAAU,eACxDJ,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAYpB,MAAM,gBAAgB5B,UAAU,YAA5C,gBAGAJ,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CACIjD,UAAY,aACZkD,GAAG,2BACHC,MAAM,OACNC,MAAOzF,EAAM0F,SACbC,OAAO,QACPC,WAAY,CACVC,UAAU,KAGhB5D,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CACIjD,UAAY,aACZkD,GAAG,2BACHC,MAAM,QACNC,MAAOzF,EAAM8F,MACbH,OAAO,QACPC,WAAY,CACVC,UAAU,KAGd5D,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CACEjD,UAAY,aACZkD,GAAG,8BACHQ,KAAMhB,EAAOH,aAAe,OAAS,WACrCY,MAAM,WACNC,MAAOzF,EAAMyE,SACbuB,UA7Ca3B,EA6CU,WA7CF,SAAA4B,GACzBjB,EAAU9E,OAAAgG,EAAA,EAAAhG,CAAA,GAAK6E,EAAN7E,OAAAiG,EAAA,EAAAjG,CAAA,GAAemE,EAAO4B,EAAMG,OAAOX,WA6CxCG,WAAY,CACVC,UAAU,EACVQ,aACEpE,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CAAgBC,SAAS,OACvBtE,EAAAC,EAAAC,cAACqE,EAAA,EAAD,CACEC,KAAK,MACLC,aAAW,6BACXjE,QAjDoB,WAChCuC,EAAU9E,OAAAgG,EAAA,EAAAhG,CAAA,GAAK6E,EAAN,CAAcH,cAAeG,EAAOH,iBAiDjC+B,YA9CoB,SAAAV,GAChCA,EAAMW,mBA+CO7B,EAAOH,aAAe3C,EAAAC,EAAAC,cAAC0E,EAAA3E,EAAD,MAAoBD,EAAAC,EAAAC,cAAC2E,EAAA5E,EAAD,WAQvDD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAYpB,MAAM,gBAAgB5B,UAAU,YAA5C,iBAGAJ,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CACIjD,UAAY,aACZkD,GAAG,2BACHC,MAAM,OACNC,MAAOzF,EAAMmF,UAAY,IAAMnF,EAAM+G,SACrCpB,OAAO,QACPC,WAAY,CACVC,UAAU,KAGhB5D,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CACIjD,UAAY,aACZkD,GAAG,2BACHC,MAAM,SACNC,MAAOzF,EAAMgH,OACbrB,OAAO,QACPC,WAAY,CACVC,UAAU,KAGZ5D,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CACAjD,UAAY,aACZkD,GAAG,2BACHC,MAAM,MACNC,MAAOzF,EAAMiH,IACbtB,OAAO,QACPC,WAAY,CACVC,UAAU,KAGlB5D,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAYpB,MAAM,gBAAgB5B,UAAU,YAA5C,YAGKJ,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CACCjD,UAAY,aACZkD,GAAG,2BACHC,MAAM,OACNC,MAAOzF,EAAM0D,KACbiC,OAAO,QACPC,WAAY,CACVC,UAAU,EACVqB,eACEjF,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CAAgBC,SAAS,SACrBtE,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAkBC,KAAM5D,EAAM6D,IAAKC,KAAG,EAACqD,WAAY,CAACC,MAAO,OAAOC,OAAQ,cAKnFpF,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CACCjD,UAAY,aACZkD,GAAG,2BACHC,MAAM,QACNC,MAAOzF,EAAMU,MACbiF,OAAO,QACPC,WAAY,CACVC,UAAU,KAGV5D,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CACFjD,UAAY,aACZkD,GAAG,2BACHC,MAAM,SACNC,MAAOzF,EAAMsH,OACb3B,OAAO,QACPC,WAAY,CACVC,UAAU,KAIpB5D,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAYpB,MAAM,gBAAgB5B,UAAU,YAA5C,WAGKJ,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CACGjD,UAAY,aACZkD,GAAG,2BACHC,MAAM,QACNC,MAAOzF,EAAMuH,MACb5B,OAAO,QACPC,WAAY,CACVC,UAAU,KAGb5D,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CACCjD,UAAY,aACZkD,GAAG,2BACHC,MAAM,OACNC,MAAOzF,EAAMwH,KACb7B,OAAO,QACPC,WAAY,CACVC,UAAU,4HC9Jd4B,EAAQC,YAAe,CAC3BC,QAAS,CACPrE,QAAQ,CAAEsE,KAAM,cAkILC,cA5Hb,SAAAA,EAAY7H,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyH,IACjB5H,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2H,GAAAtH,KAAAH,KAAMJ,KAGR8H,WAAa,WACX7H,EAAKoB,SAAS,CACZ0G,YAAY,KANG9H,EAUnB+H,YAAc,WACZ/H,EAAKoB,SAAS,CACZ0G,YAAY,KAZG9H,EAgBnB6B,aAAe,SAACD,GACd5B,EAAKoB,SAAS,CACZ4G,aAAcpG,EAAMqG,YAAY,EAAMH,YAAY,IAEpDI,QAAQC,IAAInI,EAAKS,MAAMuH,eApBNhI,EAuBnBoI,YAAc,WACZpI,EAAKoB,SAAS,CACZ6G,YAAY,KAvBdjI,EAAKS,MAAQ,CAACuH,aAAc,GAAKC,YAAY,EAAOH,YAAY,GAF/C9H,wEA8Bb,IAAAQ,EAIFL,KAAKM,MADPuH,EAHIxH,EAGJwH,aAGF,OANMxH,EAGUyH,WAKVjG,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CAAeb,MAAOA,GACtBxF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAQhC,SAAS,SACjBtE,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAASnG,UAAWjC,KAAKM,MAAMqH,WAAa,cAAe,UACzD9F,EAAAC,EAAAC,cAACqE,EAAA,EAAD,CAAYC,KAAK,QAAQxC,MAAM,WAC7BhC,EAAAC,EAAAC,cAACsG,EAAAvG,EAAD,CAAUO,QAAUrC,KAAKiI,eAE3BpG,EAAAC,EAAAC,cAACqE,EAAA,EAAD,CAAYC,KAAK,QAAQxC,MAAM,UAAUyC,aAAW,cAAcjE,QAASrC,KAAK0H,YAC9E7F,EAAAC,EAAAC,cAACuG,EAAAxG,EAAD,OAEFD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAYrB,QAAQ,KAAK3B,UAAU,aAAnC,iBAMJJ,EAAAC,EAAAC,cAACwG,EAAA,EAAD,CACE3E,QAAQ,aACR4E,OAAO,OACPC,KAAMzI,KAAKM,MAAMqH,YAEnB9F,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAACqE,EAAA,EAAD,CAAY/D,QAASrC,KAAK4H,aACxB/F,EAAAC,EAAAC,cAAC2G,EAAA5G,EAAD,QAGHD,EAAAC,EAAAC,cAAC4G,EAAA,EAAD,MACC9G,EAAAC,EAAAC,cAAC6G,EAAD,CAAUlH,aAAc1B,KAAK0B,gBAG7BG,EAAAC,EAAAC,cAAC8G,EAAA,EAAD,CAAO5G,UAAWjC,KAAKM,MAAMqH,WAAa,aAAc,SACtD9F,EAAAC,EAAAC,cAACiC,EAAD,CACEgB,IAAOhF,KAAKM,MAAMuH,aAAa9E,QAAQ+F,MACvClC,OAASiB,EAAajB,OACtBmC,MAASlB,EAAajF,KAAKmG,MAC3BhE,UAAa/E,KAAKM,MAAMuH,aAAajF,KAAKC,MAC1C8D,SAAWkB,EAAajF,KAAKO,KAC7B7C,MAASuH,EAAaxE,SAAS/C,MAC/BgD,KAAOuE,EAAaxE,SAASC,KAC7B4D,OAASW,EAAaxE,SAAS6D,OAC/BxB,MAASmC,EAAanC,MACtBJ,SAAYuC,EAAatF,MAAM+C,SAC/BjB,SAAYwD,EAAatF,MAAM8B,SAC/BwC,IAAOgB,EAAamB,IAAInC,IACxBM,MAASU,EAAaV,MACtBC,KAAQS,EAAaT,KACrB3D,IAAOoE,EAAapE,SAQ5B5B,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CAAeb,MAAOA,GACxBxF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACTJ,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAQhC,SAAS,SACjBtE,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAASnG,UAAU,UACjBJ,EAAAC,EAAAC,cAACqE,EAAA,EAAD,CAAYC,KAAK,QAAQxC,MAAM,WAC7BhC,EAAAC,EAAAC,cAACsG,EAAAvG,EAAD,CAAUO,QAAUrC,KAAKiI,eAE3BpG,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAYrB,QAAQ,KAAK3B,UAAU,aAAnC,iBAKJJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACfJ,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAYrB,QAAQ,KAAKqF,cAAY,GAArC,yBAGApH,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAYrB,QAAQ,KAAKqF,cAAY,GAArC,uCACsCpH,EAAAC,EAAAC,cAAA,WADtC,mDAKAF,EAAAC,EAAAC,cAAC8G,EAAA,EAAD,CAAO5G,UAAU,SACfJ,EAAAC,EAAAC,cAAC6G,EAAD,CAAUlH,aAAc1B,KAAK0B,yBApHvBoC,IAAMC,WChBJmF,QACW,cAA7BC,OAAO9F,SAAS+F,UAEe,UAA7BD,OAAO9F,SAAS+F,UAEhBD,OAAO9F,SAAS+F,SAASC,MACvB,2DCZNC,IAASC,OAAO1H,EAAAC,EAAAC,cAACyH,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9I,KAAK,SAAA+I,GACjCA,EAAaC","file":"static/js/main.d74e81fc.chunk.js","sourcesContent":["import React from \"react\"\r\nimport axios from 'axios'\r\nimport '../App.scss'\r\n\r\n//material-ui\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport ReactCountryFlag from \"react-country-flag\";\r\n\r\n\r\nclass TodoList extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {userList: [], perPage: 50, page: 1, totalPages: null, isLoading: true};\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadUsers();\r\n        this.setState({\r\n            randomSeed: this.props.randomSeed\r\n        })\r\n    }\r\n\r\n    loadUsers = () => {\r\n        const {userList, page, perPage, randomSeed} = this.state;\r\n        const url = `https://randomuser.me/api/?page=${page}&results=${perPage}&seed=abc`\r\n        axios.get(url)\r\n        .then(response => {\r\n            this.setState({ \r\n                userList: [...userList, ...response.data.results], isLoading:false\r\n            });\r\n        });\r\n    }\r\n\r\n    loadMore = () =>{\r\n        this.setState(prevState => ({\r\n            page: prevState.page + 1,\r\n            isLoading: true\r\n        }), this.loadUsers)\r\n    }\r\n\r\n    handleClick = (user) =>{\r\n        this.props.onSelectUser(user);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <List className= 'list'>\r\n            {this.state.userList.map(user => \r\n            <ListItem button onClick={() => this.handleClick(user)} key={user.login.uuid} >\r\n                <ListItemAvatar>\r\n                    <Avatar alt={user.name.first} src={user.picture.thumbnail}/>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={user.name.first +' '+ user.name.last } secondary={user.location.city} />\r\n                <ReactCountryFlag code={user.nat} svg  />\r\n            </ListItem>\r\n            )}\r\n            {this.state.isLoading ? \r\n            <div className=\"lds-dual-ring\"></div> : \r\n            <Button variant=\"outlined\" color=\"primary\" onClick={this.loadMore} className=\"load-more\">\r\n            Load more\r\n             </Button>\r\n            }\r\n            </List>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default TodoList;","import React from \"react\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ReactCountryFlag from \"react-country-flag\";\r\n\r\nimport '../App.scss'\r\n\r\nexport default function UserDetails(props){\r\n\r\nconst [values, setValues] = React.useState({\r\n    amount: '',\r\n    password: '',\r\n    weight: '',\r\n    weightRange: '',\r\n    showPassword: false,\r\n    });\r\n\r\nconst handleChange = prop => event => {\r\n    setValues({ ...values, [prop]: event.target.value });\r\n    };\r\n\r\n    const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n    };\r\n\r\n    const handleMouseDownPassword = event => {\r\n    event.preventDefault();\r\n    };\r\n\r\n return <div className=\"\">\r\n    <Card>\r\n    <CardContent>\r\n    <Avatar alt={props.firstname} src={props.pic} className='big-avatar' />\r\n    <Typography color=\"textSecondary\" className=\"sub-text\">\r\n          Profile Info\r\n    </Typography>\r\n    <TextField\r\n        className = 'text-field'\r\n        id=\"standard-read-only-input\"\r\n        label=\"Name\"\r\n        value={props.username}\r\n        margin=\"dense\"\r\n        InputProps={{\r\n          readOnly: true,\r\n        }}\r\n      />\r\n    <TextField\r\n        className = 'text-field'\r\n        id=\"standard-read-only-input\"\r\n        label=\"Email\"\r\n        value={props.email}\r\n        margin=\"dense\"\r\n        InputProps={{\r\n          readOnly: true,\r\n        }}\r\n      />\r\n      <TextField\r\n        className = 'text-field'\r\n        id=\"outlined-adornment-password\"\r\n        type={values.showPassword ? 'text' : 'password'}\r\n        label=\"Password\"\r\n        value={props.password}\r\n        onChange={handleChange('password')}\r\n        InputProps={{\r\n          readOnly: true,\r\n          endAdornment: (\r\n            <InputAdornment position=\"end\">\r\n              <IconButton\r\n                edge=\"end\"\r\n                aria-label=\"toggle password visibility\"\r\n                onClick={handleClickShowPassword}\r\n                onMouseDown={handleMouseDownPassword}\r\n              >\r\n                {values.showPassword ? <VisibilityOff /> : <Visibility />}\r\n              </IconButton>\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n      />\r\n\r\n\r\n    <Typography color=\"textSecondary\" className=\"sub-text\">\r\n    Personal Info\r\n    </Typography>    \r\n    <TextField\r\n        className = 'text-field'\r\n        id=\"standard-read-only-input\"\r\n        label=\"Name\"\r\n        value={props.firstname + ' '  +props.lastname}\r\n        margin=\"dense\"\r\n        InputProps={{\r\n          readOnly: true,\r\n        }}\r\n      />\r\n    <TextField\r\n        className = 'text-field'\r\n        id=\"standard-read-only-input\"\r\n        label=\"Gender\"\r\n        value={props.gender}\r\n        margin=\"dense\"\r\n        InputProps={{\r\n          readOnly: true,\r\n        }}\r\n      />\r\n        <TextField\r\n        className = 'text-field'\r\n        id=\"standard-read-only-input\"\r\n        label=\"Age\"\r\n        value={props.age}\r\n        margin=\"dense\"\r\n        InputProps={{\r\n          readOnly: true,\r\n        }}\r\n      />\r\n  <Typography color=\"textSecondary\" className=\"sub-text\">\r\nLocation\r\n    </Typography> \r\n       <TextField\r\n        className = 'text-field'\r\n        id=\"standard-read-only-input\"\r\n        label=\"City\"\r\n        value={props.city}\r\n        margin=\"dense\"\r\n        InputProps={{\r\n          readOnly: true,\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n                <ReactCountryFlag code={props.nat} svg styleProps={{width: '20px',height: '20px'}}/>\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n      />\r\n       <TextField\r\n        className = 'text-field'\r\n        id=\"standard-read-only-input\"\r\n        label=\"State\"\r\n        value={props.state}\r\n        margin=\"dense\"\r\n        InputProps={{\r\n          readOnly: true,\r\n        }}\r\n      />\r\n          <TextField\r\n        className = 'text-field'\r\n        id=\"standard-read-only-input\"\r\n        label=\"Street\"\r\n        value={props.street}\r\n        margin=\"dense\"\r\n        InputProps={{\r\n          readOnly: true,\r\n        }}\r\n      />\r\n\r\n<Typography color=\"textSecondary\" className=\"sub-text\">\r\nContact\r\n    </Typography> \r\n     <TextField\r\n        className = 'text-field'\r\n        id=\"standard-read-only-input\"\r\n        label=\"Phone\"\r\n        value={props.phone}\r\n        margin=\"dense\"\r\n        InputProps={{\r\n          readOnly: true,\r\n        }}\r\n      />\r\n       <TextField\r\n        className = 'text-field'\r\n        id=\"standard-read-only-input\"\r\n        label=\"Cell\"\r\n        value={props.cell}\r\n        margin=\"dense\"\r\n        InputProps={{\r\n          readOnly: true,\r\n        }}\r\n      />\r\n    </CardContent>\r\n    </Card>\r\n</div>\r\n}","import React from 'react';\nimport UserList from './Components/UserList'\nimport UserDetail from './Components/UserDetail'\n\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/People';\nimport HomeIcon from '@material-ui/icons/Home';\nimport Divider from '@material-ui/core/Divider';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Drawer from '@material-ui/core/Drawer';\n\nimport './App.scss'\n\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary:{ main: '#d5333e' }\n  },\n});\n\nclass App extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {selectedUser: [] , isSelected: false, drawerOpen: false};\n}\n  openDrawer = () =>{\n    this.setState({\n      drawerOpen: true\n    });\n  }\n\n  closeDrawer = () =>{\n    this.setState({\n      drawerOpen: false\n    });\n  }\n\n  onSelectUser = (user) => {\n    this.setState({\n      selectedUser: user, isSelected: true, drawerOpen: false\n    });\n    console.log(this.state.selectedUser);\n  }\n\n  onHomeClick = () =>{\n    this.setState({\n      isSelected: false\n    })\n  }\n\n\nrender(){\n\n  const {\n    selectedUser, isSelected\n  } = this.state;\n\n  if(isSelected){\n      return (\n        <ThemeProvider theme={theme}>\n        <div className=\"App\">\n            <AppBar position=\"fixed\">\n            <Toolbar className={this.state.drawerOpen ? 'appbar open' :'appbar'}>\n              <IconButton edge=\"start\" color=\"inherit\">\n                <HomeIcon onClick ={this.onHomeClick}/>\n              </IconButton>\n              <IconButton edge=\"start\" color=\"inherit\" aria-label=\"open drawer\" onClick={this.openDrawer}>\n                <MenuIcon />\n              </IconButton>\n              <Typography variant=\"h6\" className=\"menu-text\">\n                Random User\n              </Typography>\n            </Toolbar>\n          </AppBar>\n\n          <Drawer\n            variant=\"persistent\"\n            anchor=\"left\"\n            open={this.state.drawerOpen}\n          >\n          <div className='drawer-header'>\n            <IconButton onClick={this.closeDrawer}>\n              <ChevronLeftIcon />\n            </IconButton>\n          </div>\n           <Divider />\n            <UserList onSelectUser={this.onSelectUser}/>\n          </Drawer>\n\n            <Paper className={this.state.drawerOpen ? 'paper open' :'paper'}>\n              <UserDetail \n                pic = {this.state.selectedUser.picture.large}\n                gender= {selectedUser.gender}\n                title = {selectedUser.name.title}\n                firstname = {this.state.selectedUser.name.first}\n                lastname ={selectedUser.name.last}\n                state = {selectedUser.location.state}\n                city= {selectedUser.location.city}\n                street= {selectedUser.location.street}\n                email = {selectedUser.email}\n                username = {selectedUser.login.username}\n                password = {selectedUser.login.password}\n                age = {selectedUser.dob.age}\n                phone = {selectedUser.phone}\n                cell = {selectedUser.cell}\n                nat = {selectedUser.nat}\n              />\n            </Paper>\n        </div>\n        </ThemeProvider>\n      );\n    }else{\n      return(\n        <ThemeProvider theme={theme}>\n      <div className=\"App\">\n            <AppBar position=\"fixed\">\n            <Toolbar className='appbar'>\n              <IconButton edge=\"start\" color=\"inherit\">\n                <HomeIcon onClick ={this.onHomeClick}/>\n              </IconButton>\n              <Typography variant=\"h6\" className=\"menu-text\">\n                Random User\n              </Typography>\n            </Toolbar>\n          </AppBar>\n          <div className=\"home\">\n          <Typography variant=\"h1\" gutterBottom>\n            Hi! I'm Alberto Rubio\n          </Typography>\n          <Typography variant=\"h2\" gutterBottom>\n            This is a Code Challenge for Intive.<br/>\n            Made with React, Material-UI and RandomUserAPI\n          </Typography>\n          </div>\n          <Paper className=\"paper\">\n            <UserList onSelectUser={this.onSelectUser}/>\n          </Paper>\n      </div>\n      </ThemeProvider>\n      );\n    }\n}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}